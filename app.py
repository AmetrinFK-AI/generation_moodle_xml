import re
import os
from io import BytesIO

import streamlit as st
import openai
from openpyxl import load_workbook

# ================== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ==================
# –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å–≤—ñ–π –∫–ª—é—á OpenAI —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (OPENAI_API_KEY)
openai.api_key = os.getenv(
    "OPENAI_API_KEY"
)

# ================== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ==================
st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è Moodle (XML)", layout="wide")
st.markdown("""
<style>
textarea, input[type=text] {
    border-radius: 8px;
    padding: 8px;
    font-size: 1rem;
}
div[data-testid="column"] > div {
    background-color: #f9f9f9;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}
</style>
""", unsafe_allow_html=True)
st.title("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è Moodle (XML)")

with st.expander("üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–æ—é", expanded=False):
    st.markdown("""
**Excel-—Ä–µ–∂–∏–º**
- –ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx).
- –ö–æ–ª–æ–Ω–∫–∞ A: —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è.
- –ö–æ–ª–æ–Ω–∫–∞ A: –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.
- –ü–æ–∑–Ω–∞—á—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∂–æ–≤—Ç–∏–º —Ñ–æ–Ω–æ–º (FFFF00).

**GPT-—Ä–µ–∂–∏–º**
- –í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
- –°–∏—Å—Ç–µ–º–∞ —Å—Ç–≤–æ—Ä–∏—Ç—å 10 –ø–∏—Ç–∞–Ω—å:
  - 4‚Äì5 Single-choice,
  - 2‚Äì3 True/False,
  - 2‚Äì3 Multiple-choice.
- –î–ª—è –∫–æ–∂–Ω–æ–≥–æ, –∫—Ä—ñ–º True/False, 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ A‚ÄìD.

**–†—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è**
- –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–∏—Ç–∞–Ω–Ω—è: Single-choice, Multiple-choice, True/False.
- –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏.
- –ü–æ–∑–Ω–∞—á—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.

**–ì–æ—Ç–æ–≤–∏–π —Ç–µ—Å—Ç**
- –§–æ—Ä–º–∞—Ç:

1. –ü–∏—Ç–∞–Ω–Ω—è...
A. –í—ñ–¥–ø–æ–≤—ñ–¥—å A  
B. –í—ñ–¥–ø–æ–≤—ñ–¥—å B  
C. –í—ñ–¥–ø–æ–≤—ñ–¥—å C  
D. –í—ñ–¥–ø–æ–≤—ñ–¥—å D  
–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å: B

- –î–ª—è True/False:

7. –ü–∏—Ç–∞–Ω–Ω—è...  
–í–∞—Ä—ñ–∞–Ω—Ç–∏: True / False  
–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å: True

- –û–±–æ–≤'—è–∑–∫–æ–≤—ñ: –Ω—É–º–µ—Ä–∞—Ü—ñ—è, –≤–∞—Ä—ñ–∞–Ω—Ç–∏, —Ä—è–¥–æ–∫ –∑ `–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å:`.
""", unsafe_allow_html=False)

# ================== –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è XML ==================

def wrap_cdata(text: str) -> str:
    """–û–±–≥–æ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç —É CDATA –∑ HTML-—Ç–µ–≥–æ–º <p>."""
    return f"<![CDATA[<p>{text}</p>]]>"

def detect_question_type(answers):
    """–í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–∏—Ç–∞–Ω–Ω—è –∑–∞ —Å–ø–∏—Å–∫–æ–º –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π."""
    if all('-' in ans for ans, _ in answers):
        return "matching"
    correct = sum(1 for _, c in answers if c)
    if len(answers) == 2 and correct <= 1:
        return "truefalse"
    if correct == 1:
        return "single"
    if correct > 1:
        return "multiple"
    return "unknown"

def generate_moodle_xml_string(questions) -> str:
    """–ì–µ–Ω–µ—Ä—É—î Moodle XML –∑—ñ —Å–ø–∏—Å–∫—É –ø–∏—Ç–∞–Ω—å."""
    lines = ['<?xml version="1.0" encoding="UTF-8"?>', '<quiz>']
    for q in questions:
        q_type = detect_question_type(q["answers"])
        if q_type in ("single", "multiple"):
            lines.append('  <question type="multichoice">')
        elif q_type == "truefalse":
            lines.append('  <question type="truefalse">')
        elif q_type == "matching":
            lines.append('  <question type="matching">')
        else:
            continue

        preview = q["text"][:30] + ('...' if len(q["text"]) > 30 else '')
        lines.append('    <name>')
        lines.append(f'      <text>{wrap_cdata(preview)}</text>')
        lines.append('    </name>')

        lines.append('    <questiontext format="html">')
        lines.append(f'      <text>{wrap_cdata(q["text"])}</text>')
        lines.append('    </questiontext>')

        if q_type in ("single", "multiple"):
            total_correct = sum(1 for _, c in q["answers"] if c)
            penalty = 1.0 / total_correct if total_correct else 0
            lines.append('    <shuffleanswers>true</shuffleanswers>')
            lines.append(f'    <single>{"true" if q_type=="single" else "false"}</single>')
            lines.append('    <answernumbering>abc</answernumbering>')
            lines.append(f'    <penalty>{penalty:.6f}</penalty>')
            for text, corr in q["answers"]:
                frac = 100 if corr else 0
                lines.append(f'    <answer fraction="{frac}" format="html">')
                lines.append(f'      <text><![CDATA[{text}]]></text>')
                lines.append('    </answer>')
        elif q_type == "truefalse":
            correct_true = q["answers"][0][1]
            for val in ("true", "false"):
                frac = 100 if (val=="true" and correct_true) or (val=="false" and not correct_true) else 0
                lines.append(f'    <answer fraction="{frac}" format="html">')
                lines.append(f'      <text><![CDATA[{val}]]></text>')
                lines.append('    </answer>')
        elif q_type == "matching":
            lines.append('    <shuffleanswers>true</shuffleanswers>')
            for pair, _ in q["answers"]:
                left, right = map(str.strip, pair.split('-', 1))
                lines.append('    <subquestion format="html">')
                lines.append(f'      <text><![CDATA[{left}]]></text>')
                lines.append(f'      <answer><![CDATA[{right}]]></answer>')
                lines.append('    </subquestion>')

        lines.append('  </question>')
    lines.append('</quiz>')
    return "\n".join(lines)

def download_xml(data, filename: str):
    """–°—Ç–≤–æ—Ä—é—î –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML-—Ñ–∞–π–ª—É."""
    xml_bytes = data.encode('utf-8') if isinstance(data, str) else data
    st.download_button(
        label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ XML",
        data=xml_bytes,
        file_name=filename,
        mime="application/xml"
    )

# ================== –ü–∞—Ä—Å–µ—Ä–∏ ==================

def parse_text_format(text: str):
    """–ü–∞—Ä—Å–µ—Ä —Ç–µ—Å—Ç—ñ–≤ –∑ —Ç–µ–∫—Å—Ç—É –∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—î—é —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏."""
    mapping = {'–∞':'A','–ê':'A','–±':'B','–ë':'B','–≤':'C','–í':'C','–≥':'D','–ì':'D'}
    blocks = re.split(r"(?m)(?=^\d+\.)", text.strip())
    blocks = [blk for blk in blocks if blk.strip()]
    corr_pattern = re.compile(r"(?i)^(?:–ø—Ä–∞–≤–∏–ª—å–Ω\w*\s+(?:–æ—Ç–≤–µ—Ç|–≤—ñ–¥–ø–æ–≤—ñ–¥))[:]?", re.IGNORECASE)
    questions, errors = [], []

    for idx, block in enumerate(blocks, 1):
        lines = [ln.strip() for ln in block.splitlines() if ln.strip()]
        m_q = re.match(r"^\d+\.\s*(.+)", lines[0])
        q_text = m_q.group(1).strip() if m_q else lines[0]

        corr_idx = next((i for i, ln in enumerate(lines) if corr_pattern.match(ln)), None)
        if corr_idx is None:
            errors.append((idx, "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–∫ —ñ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏"))
            continue

        ans_lines = lines[1:corr_idx]
        corr_line = lines[corr_idx]
        letters = re.findall(r"[A-–ìA-D]", corr_line)
        correct_set = {mapping.get(l, l.upper()) for l in letters}

        answers = []
        if len(ans_lines) == 1 and re.search(r"(?i)true", ans_lines[0]):
            is_true = re.search(r"(?i)true", corr_line) is not None
            answers = [("true", is_true), ("false", not is_true)]
        else:
            for ln in ans_lines:
                m_a = re.match(r"^([A-–ì])[\)\.]*\s*(.+)", ln)
                if not m_a:
                    errors.append((idx, f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: '{ln}'"))
                    break
                key, txt = m_a.group(1), m_a.group(2).strip()
                letter = mapping.get(key, key.upper())
                answers.append((txt, letter in correct_set))
            if len(answers) < 2:
                errors.append((idx, "–ú–µ–Ω—à–µ –¥–≤–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"))
                continue

        questions.append({"text": q_text, "answers": answers})

    return questions, errors

def parse_from_excel(uploaded_file) -> tuple[list, list]:
    """–ü–∞—Ä—Å–µ—Ä Excel: –ø–∏—Ç–∞–Ω–Ω—è –≤ –∫–æ–ª–æ–Ω—Ü—ñ A, –∂–æ–≤—Ç–∏–π —Ñ–æ–Ω = –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
    wb = load_workbook(uploaded_file, data_only=True)
    ws = wb.active
    items = []
    for cell in ws['A']:
        txt = str(cell.value).strip() if cell.value else ""
        is_corr = False
        if cell.fill and getattr(cell.fill, 'fill_type', None) == 'solid':
            if getattr(cell.fill.start_color, 'rgb', '').endswith('FFFF00'):
                is_corr = True
        items.append((txt, is_corr))

    blocks, curr = [], []
    for txt, corr in items:
        if not txt and curr:
            blocks.append(curr)
            curr = []
        elif txt:
            curr.append((txt, corr))
    if curr:
        blocks.append(curr)

    questions, errors = [], []
    for idx, blk in enumerate(blocks, 1):
        if len(blk) < 3:
            errors.append((idx, "–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–∏—Ç–∞–Ω–Ω—è + ‚â•2 –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"))
            continue
        q_text = blk[0][0]
        answers = blk[1:]
        questions.append({"text": q_text, "answers": answers})

    return questions, errors

# ================== –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∂–∏–º—ñ–≤ ==================

mode = st.sidebar.selectbox("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç—É", [
    "1. Excel", "2. –ü–æ —Ç–µ–∫—Å—Ç—É (GPT)", "3. –í—Ä—É—á–Ω—É", "4. –ì–æ—Ç–æ–≤–∏–π —Ç–µ—Å—Ç"
])

if mode == "1. Excel":
    st.header("1Ô∏è‚É£ –†–µ–∂–∏–º Excel")
    file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ .xlsx", type=["xlsx"])
    if file:
        qs, errs = parse_from_excel(file)
        if errs:
            st.error("–ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É Excel:")
            for i, msg in errs:
                st.write(f"- –ë–ª–æ–∫ {i}: {msg}")
        else:
            st.success(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(qs)} –ø–∏—Ç–∞–Ω—å")
        if qs and st.button("–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ XML"):
            xml_str = generate_moodle_xml_string(qs)
            st.subheader("üìÑ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ XML")
            st.text_area("", xml_str, height=300)
            download_xml(xml_str, "excel_test.xml")

elif mode == "2. –ü–æ —Ç–µ–∫—Å—Ç—É (GPT)":
    st.header("2Ô∏è‚É£ –†–µ–∂–∏–º GPT-–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
    user_text = st.text_area("–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é", height=200)
    if st.button("–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç"):
        prog = st.progress(0)
        status = st.empty()
        status.text("1/3: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Ç—É‚Ä¶"); prog.progress(10)
        system_prompt = (
            """–í–∏ ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç —ñ–∑ –∂–æ—Ä—Å—Ç–∫–∏–º –æ–±–º–µ–∂–µ–Ω–Ω—è–º –Ω–∞ 10 –ø–∏—Ç–∞–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ Moodle XML —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
1) –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –Ω–∞–¥–∞–Ω–∏–π —Ç–µ–∫—Å—Ç.
2) –°—Ç–≤–æ—Ä—ñ—Ç—å **—Å–∞–º–µ 10** –ª–æ–≥—ñ—á–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é:
   ‚Äì 4‚Äì5 –ø–∏—Ç–∞–Ω—å Single-choice,
   ‚Äì 2‚Äì3 –ø–∏—Ç–∞–Ω–Ω—è True/False,
   ‚Äì 2‚Äì3 –ø–∏—Ç–∞–Ω–Ω—è Multiple-choice.
3) –ö–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è (–æ–∫—Ä—ñ–º True/False) –º–∞—î –º–∞—Ç–∏ 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ (A, B, C, D).
–î–ª—è Multiple-choice –≤—ñ–¥–∑–Ω–∞—á—Ç–µ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ.
4) –ü–µ—Ä–µ–¥ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å = 10.
5) –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å **—Ç—ñ–ª—å–∫–∏** XML-–∫–æ–¥ (–±–µ–∑ –±—É–¥—å-—è–∫–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤) —ñ –æ–¥—Ä–∞–∑—É –ø—Ä–∏–ø–∏–Ω—ñ—Ç—å –ø—ñ—Å–ª—è 10-–≥–æ –ø–∏—Ç–∞–Ω–Ω—è.
<END>
"""
        )
        status.text("2/3: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É‚Ä¶"); prog.progress(40)
        resp = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "system", "content": system_prompt},
                      {"role": "user", "content": user_text}],
            temperature=0,
        )
        status.text("3/3: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ‚Ä¶"); prog.progress(70)
        text = resp.choices[0].message.content.strip()
        if text.startswith("<?xml") or text.lstrip().startswith("<quiz"):
            count = len(re.findall(r'<question', text))
            if count != 10:
                st.error(f"GPT –ø–æ–≤–µ—Ä–Ω—É–≤ {count} –ø–∏—Ç–∞–Ω—å –∑–∞–º—ñ—Å—Ç—å 10.")
            xml_str = text if text.startswith("<?xml") else '<?xml version="1.0" encoding="UTF-8"?>\n' + text
            if count > 10:
                parts = re.findall(r'(<question[\s\S]*?</question>)', xml_str)
                xml_str = '<?xml version="1.0" encoding="UTF-8"?>\n<quiz>' + ''.join(parts[:10]) + '</quiz>'
                st.warning("–û–±—Ä—ñ–∑–∞–Ω–æ –¥–æ –ø–µ—Ä—à–∏—Ö 10 –ø–∏—Ç–∞–Ω—å.")
            elif count < 10:
                st.error(f"GPT –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤ —Ç—ñ–ª—å–∫–∏ {count} –ø–∏—Ç–∞–Ω—å, –∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ 10.")
            with open("gpt_test.xml", "w", encoding="utf-8") as f:
                f.write(xml_str)
            st.subheader("üìÑ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ XML")
            st.code(xml_str)
            download_xml(xml_str, "gpt_test.xml")
            status.text("–ì–æ—Ç–æ–≤–æ!")
        else:
            status.text("3/3: –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ‚Ä¶"); prog.progress(80)
            qs, errs = parse_text_format(text)
            if errs:
                st.error("–ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:")
                for i, msg in errs:
                    st.write(f"- –ë–ª–æ–∫ {i}: {msg}")
            else:
                if len(qs) != 10:
                    st.error(f"GPT –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤ {len(qs)} –ø–∏—Ç–∞–Ω—å –∑–∞–º—ñ—Å—Ç—å 10.")
                    qs = qs[:10]
                status.text("4/4: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è XML‚Ä¶"); prog.progress(100)
                xml_str = generate_moodle_xml_string(qs)
                with open("gpt_test.xml", "w", encoding="utf-8") as f:
                    f.write(xml_str)
                st.subheader("üìÑ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ XML")
                st.code(xml_str)
                download_xml(xml_str, "gpt_test.xml")
                status.text("–ì–æ—Ç–æ–≤–æ!")

elif mode == "3. –í—Ä—É—á–Ω—É":
    st.header("3Ô∏è‚É£ –†—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å")
    if "manual_qs" not in st.session_state:
        st.session_state.manual_qs = []

    qtype = st.selectbox("–¢–∏–ø –ø–∏—Ç–∞–Ω–Ω—è", ["Single-choice", "Multiple-choice", "True/False"])

    with st.form("manual_form"):
        q_txt = st.text_input("–¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è")
        answers = []
        if qtype == "True/False":
            corr = st.radio("–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", ["true", "false"])
            answers = [("true", corr == "true"), ("false", corr == "false")]
        else:
            cols = st.columns([8, 1])
            with cols[0]:
                a1 = st.text_input("A."); a2 = st.text_input("B.")
                a3 = st.text_input("C."); a4 = st.text_input("D.")
            with cols[1]:
                c1 = st.checkbox("", key="c1")
                c2 = st.checkbox("", key="c2")
                c3 = st.checkbox("", key="c3")
                c4 = st.checkbox("", key="c4")
            answers = [(a1, c1), (a2, c2), (a3, c3), (a4, c4)]

        submitted = st.form_submit_button("–î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")

    if submitted:
        st.session_state.manual_qs.append({"text": q_txt, "answers": answers})

    if st.session_state.manual_qs:
        st.subheader("–°–ø–∏—Å–æ–∫ –ø–∏—Ç–∞–Ω—å")
        for idx, q in enumerate(st.session_state.manual_qs, 1):
            st.write(f"{idx}. {q['text']}")
        if st.button("–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ XML –¥–ª—è —Ä—É—á–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å"):
            xml_str = generate_moodle_xml_string(st.session_state.manual_qs)
            st.text_area("", xml_str, height=300)
            download_xml(xml_str, "manual_test.xml")

elif mode == "4. –ì–æ—Ç–æ–≤–∏–π —Ç–µ—Å—Ç":
    st.header("4Ô∏è‚É£ –†–µ–∂–∏–º –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–µ—Å—Ç—É")

    ready = st.text_area(
        "–í—Å—Ç–∞–≤—Ç–µ –≥–æ—Ç–æ–≤–∏–π —Ç–µ—Å—Ç —É –∑–∞–∑–Ω–∞—á–µ–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (1. ‚Ä¶ A. ‚Ä¶ –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ‚Ä¶)",
        height=200
    )

    if st.button("–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ XML –∑ –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–µ—Å—Ç—É", key="gen_ready"):
        qs, errs = parse_text_format(ready)

        if errs:
            st.error("–ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ —Ç–µ—Å—Ç—É:")
            for idx, msg in errs:
                st.write(f"- –ë–ª–æ–∫ {idx}: {msg}")
        else:
            st.success(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(qs)} –ø–∏—Ç–∞–Ω—å ‚Äî –≥–µ–Ω–µ—Ä—É—î–º–æ XML‚Ä¶")
            xml_str = generate_moodle_xml_string(qs)

            st.text_area(
                "XML-–∫–æ–¥",
                xml_str,
                height=300,
                label_visibility="collapsed"
            )
            download_xml(xml_str, "ready_test.xml")
